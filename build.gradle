buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
  id "com.matthewprenger.cursegradle" version "1.4.0"
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group = "${project.author}.advancedRocketry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archivebase

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

apply from: "gradle/scripts/getbuildnumber.gradle"
apply from: "gradle/scripts/jars.gradle"
apply from: "gradle/scripts/version.gradle"
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

clean{
    delete 'output'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: '1.16.5'
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                advancedrocketry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'trace'

            mods {
                advancedrocketry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'advancedrocketry', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                advancedrocketry {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
        maven {
            name = "mezz.jei"
            url = "https://dvs1.progwml6.com/files/maven"
        }
    ivy {
            name "industrialcraft-2"
            artifactPattern "http://jenkins.ic2.player.to/job/IC2_111/39/artifact/build/libs/[module]-[revision].[ext]"
        }
    /*ivy {
            name "Tesla"
            artifactPattern "https://addons-origin.cursecdn.com/files/2347/256/[module]-[revision].[ext]"
        }
    ivy {
	    name "GalacticraftCore"
            artifactPattern "https://micdoodle8.com/new-builds/GC-1.12/174/[module]-[revision].[ext]"
        }
   ivy {
           name "EnderIO"
           artifactPattern "https://addons-origin.cursecdn.com/files/2238/375/[module]-[revision].[ext]"
       }*/
    ivy {
            name "LibVulpes"
            artifactPattern "http://65.78.115.159:8080/job/LibVulpes/job/libVulpes/job/1.16.5/" + project.libVulpesBuildNum +"/artifact/output/[module]-[revision].[ext]"
            metadataSources {
			artifact()
	    }
        }
	flatDir {
	    dirs 'libs'
	}
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //compile name: 'industrialcraft-2', version: '2.7.39-ex111-api', ext: 'jar'
    //compile name: 'Tesla', version: '1.11-1.3.0.51-deobf', ext: 'jar'
    //compile name: 'EnderIO', version: '1.7.10-2.2.8.381', ext: 'jar'
    compile name: 'LibVulpes', version: '1.16.5-' + project.libVulpesVersion  + '-' + project.libVulpesBuildNum + '-deobf', ext: 'jar'
    //compile name: 'GalacticraftCore', version: '1.12.2-4.0.1.174', ext: 'jar'

    // compile against the JEI API
    //decompile "mezz.jei:jei-1.16.1:7.0.0.6"
    // at runtime, use the full JEI jar
    compile "mezz.jei:jei-1.16.1:7.0.0.6:api"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "advancedrockety",
            "Specification-Vendor": project.author,
            "Specification-Version": project.version_major, // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor": project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            //'FMLCorePlugin': 'zmaster587.advancedRocketry.asm.AdvancedRocketryPlugin',
            //'FMLCorePluginContainsFMLMod': 'true'
        ])
    }
}

task deobfJar(type: Jar) {
     from sourceSets.main.output
     //if project name is BBM-Dev it makes the deobf jar deobf-dev if not its just deobf
     classifier = "deobf"
     destinationDir = file 'output'
     manifest {
        attributes 'FMLCorePlugin': 'zmaster587.advancedRocketry.asm.AdvancedRocketryPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
	attributes([
            "Specification-Title": "AdvancedRocketry",
            "Specification-Vendor": project.author,
            "Specification-Version": project.version_major, // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor": project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
     mustRunAfter "jar" 
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.mcversion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'META-INF/mods.toml'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.mcversion
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'META-INF/mods.toml'
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}



curseforge{
  if (project.hasProperty("thecursedkey")) {
        apiKey = project.thecursedkey
    }
    else {
    apiKey = ""
    }
  project {
  //Advanced Rocketry
    id = "236542"
    relations {
        requiredDependency 'libvulpes'
    }
    changelog = file('changelog.html')
    changelogType = 'html'
    releaseType = "alpha"
    addGameVersion project.mcversion
    mainArtifact(jar) {
      displayName = "Advanced Rocketry ${project.version} build " + project.getBuildNumber() +  " for " + project.mcversion
    }
    addArtifact (deobfJar){
         displayName = "Advanced Rocketry ${project.version}-deobf build " + project.getBuildNumber() + " for " + project.mcversion
    }
   }
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File ("changelog.html")
    untaggedName = "Current release ${project.version}"
    fromCommit = startGitRev
    toRef =  "HEAD"
    gitHubIssuePattern = "nonada123";
    templateContent = """
{{#tags}}
<h1> Highly untested and may break world</h1>
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li> <a href="https://github.com/zmaster587/AdvancedRocketry/commit/{{hash}}" target=_blank> {{{message}}}</a>
</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

tasks.build.dependsOn makeChangelog, deobfJar
